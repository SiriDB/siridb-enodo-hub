{"0.2.0-beta0.1.0": "//ti\nif (!has_type('EventOutput')) {\n    new_procedure('add_event_output', |output| {\n        output = EventOutput(output);\n        .event_output_store.outputs.push(output);\n        .event_output_store.ev.emit('add-event-output', output);\n        return output\n    });\n    new_procedure('delete_event_output', |output_rid| {\n        output = thing(output_rid)\n        if (type(output) == \"EventOutput\") {\n            .event_output_store.outputs.remove(|o| o.id() == output_rid)\n            .event_output_store.ev.emit('delete-event-output', output);\n        }\n    });\n    set_type('EventOutput', {\n        severity: 'str',\n        for_event_types: '[]',\n        vendor_name: 'str',\n        custom_name: 'str',\n        url: 'str',\n        headers: 'thing',\n        payload: 'str',\n    });\n    set_type('EventOutputStore', {\n        outputs: '[EventOutput]',\n        ev: 'room',\n    });\n    .event_output_store = {};\n    .event_output_store.to_type('EventOutputStore');\n};\n\nif (!has_type('ResultOutput')) {\n    new_procedure('add_result_output', |output| {\n        output = ResultOutput(output);\n        .result_output_store.outputs.push(output);\n        .result_output_store.ev.emit('add-result-output', output);\n        return output\n    });\n    new_procedure('delete_result_output', |output_rid| {\n        output = thing(output_rid)\n        if (type(output) == \"ResultOutput\") {\n            .result_output_store.outputs.remove(|o| o.id() == output_rid)\n            .result_output_store.ev.emit('delete-result-output', output);\n        }\n    });\n    set_type('ResultOutput', {\n        url: 'str',\n        params: 'thing',\n        headers: 'thing',\n        payload: 'str',\n    });\n    set_type('ResultOutputStore', {\n        outputs: '[ResultOutput]',\n        ev: 'room',\n    });\n    .result_output_store = {};\n    .result_output_store.to_type('ResultOutputStore');\n};\n\nif (!has_type('Worker')) {\n    new_procedure('add_worker', |worker| {\n        worker = Worker(worker);\n        .worker_store.workers.push(worker);\n        .worker_store.ev.emit('add-worker', worker);\n        return worker\n    });\n    new_procedure('delete_worker', |worker_rid| {\n        worker = thing(worker_rid)\n        if (type(worker) == \"Worker\") {\n            .worker_store.workers.remove(|o| o.id() == worker_rid)\n            .worker_store.ev.emit('delete-worker', worker);\n        }\n    });\n    set_type('Worker', {\n        worker_idx: 'int',\n        hostname: 'str',\n        port: 'int',\n        worker_config: 'thing'\n    });\n    set_type('WorkerStore', {\n        workers: '[Worker]',\n        ev: 'room',\n    });\n    .worker_store = {};\n    .worker_store.to_type('WorkerStore');\n};\n\nif (!has_type('SettingStore')) {\n    new_procedure('update_setting', |key, value| {\n        if (.setting_store.settings.has(key)) {\n            .setting_store.settings.set(key, value);\n            .setting_store.ev.emit('update-setting', key, value);\n        }\n    });\n    set_type('SettingStore', {\n        settings: 'thing',\n        ev: 'room',\n    });\n    .setting_store = {\n        settings: {\n            max_in_queue_before_warning: 25,\n            min_data_points: 100\n        }\n    };\n    .setting_store.to_type('SettingStore');\n};\n.hub_version = \"0.2.0-beta1.0.0\";"}